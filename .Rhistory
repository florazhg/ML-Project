hist(gdata_no_NA$Hours,
breaks = 100,
col = "skyblue",
border = "black",
main = "Histogramme des heures de jeu",
xlab = "Heures de jeu",
ylab = "Fréquence")
hist(gdata_no_NA$Hours,
breaks = 5,
col = "skyblue",
border = "black",
main = "Histogramme des heures de jeu",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Hours,
breaks = 10,
col = "skyblue",
border = "black",
main = "Histogramme des heures de jeu",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Hours,
breaks = 12,
col = "skyblue",
border = "black",
main = "Histogramme des heures de jeu",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Hours,
breaks = 14,
col = "skyblue",
border = "black",
main = "Histogramme des heures de jeu",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Hours,
breaks = 11,
col = "skyblue",
border = "black",
main = "Histogramme des heures de jeu",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Hours,
breaks = 8,
col = "skyblue",
border = "black",
main = "Histogramme des heures de jeu",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Hours,
breaks = 10,
col = "skyblue",
border = "black",
main = "Histogramme des heures de jeu",
xlab = "Heures de jeu",
ylab = "Fréquence")
summary(gdata_no_NA)
table(gdata_no_NA$Hours)
hist(is.numeric(gdata_no_NA$Hours),
breaks = 10,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(as.numeric(gdata_no_NA$Hours),
breaks = 10,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Hours,
breaks = 10,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
hist(gdata_no_NA$Hours,
breaks = 10,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence",
freq = FALSE)
hist(gdata_no_NA$Hours,
breaks = 10,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
# variables
names(gdata)
hist(gdata_no_NA$Age,
breaks = 10,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
hist(gdata_no_NA$Age,
breaks = 20,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
hist(gdata_no_NA$Age,
breaks = 50,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Age,
breaks = 30,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Age,
breaks = 25,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
hist(gdata_no_NA$Age,
breaks = 25,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Age,
breaks = 35,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Age,
breaks = 40,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Age,
breaks = 50,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Age,
breaks = 10,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Age,
breaks = 15,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Hours,
breaks = 10,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
plot(GAD_T ~ Hours, data = gdata_no_NA)
head(gdata_no_NA)
plot(GAD_T ~ Hours, data = gdata_no_NA)
reg <-lm(GAD_T ~ Hours, data = gdata_no_NA)
summary(reg)
boxplot(gdata_no_NA$GAD_T)
boxplot(gdata_no_NA$SWL_T)
boxplot(gdata_no_NA$SPIN_T)
reg1 <-lm(SPIN_T ~ Hours, data = gdata_no_NA)
summary(reg1)
reg <-lm(GAD_T ~ Hours, data = gdata_no_NA)
summary(reg)
reg1 <-lm(SPIN_T ~ Hours, data = gdata_no_NA)
summary(reg1)
nrow(gdata) # 14 464 ligneS
boxplot(gdata_no_NA$Hours)
tablebdf <- read.table("/Users/florazheng/Library/CloudStorage/OneDrive-UniversitéParis1Panthéon-Sorbonne/M1 Ecostats/S1/sondages/Ancien projet/bdf/bdf.csv", sep=":",header=T)
bdfsmall <- subset(tablebdf,select=c(DOMTRAV,TYPMEN2,CC,REVTOT,DIPLOPR,DIPLOCJ,COEF))
bdf <- bdfsmall[complete.cases(bdfsmall),]
bdf
# level = variable quali
bdf.logit <- glm(DOMTRAV~TYPMEN2+CC+REVTOT+DIPLOPR+DIPLOCJ, data=bdf, family=binomial(),weight=COEF) # ponderation a chacune des obs
bdf[,colqual] <- data.frame(apply(bdf[colqual], 2, as.factor))
bdf$DOMTRAV <- as.factor(bdf$DOMTRAV)
bdf.logit3 <- glm(DOMTRAV-TYPMEN2*REVTOT+CC+DIPLOPR+DIPLOCJ*REVTOT, data=bdf, family=binomial(), weight=COEF)
tablebdf <- read.table("/Users/florazheng/Library/CloudStorage/OneDrive-UniversitéParis1Panthéon-Sorbonne/M1 Ecostats/S1/sondages/Ancien projet/bdf/bdf.csv", sep=":",header=T)
bdfsmall <- subset(tablebdf,select=c(DOMTRAV,TYPMEN2,CC,REVTOT,DIPLOPR,DIPLOCJ,COEF)) # selection des variables
bdf <- bdfsmall[complete.cases(bdfsmall),] # recup que les donnees sans valeurs manquantes
bdf$DOMTRAV <- as.factor(bdf$DOMTRAV)
bdf$TYPMEN2 <-as.factor(bdf$TYPMEN2)
bdf$CC <- as.factor(bdf$CC)
bdf$DIPLOPR <- as.factor(bdf$DIPLOPR)
bdf$DIPLOCJ <- as.factor(bdf$DIPLOCJ)
# level = variable quali
bdf.logit <- glm(DOMTRAV~TYPMEN2+CC+REVTOT+DIPLOPR+DIPLOCJ, data=bdf, family=binomial(),weight=COEF) # ponderation a chacune des obs
# 1e estimation : des variables sont peu etre pas utiles
bdf.logit2 <- glm(DOMTRAV-TYPMEN2*REVTOT+CC+DIPLOPR+DIPLOCJ, data=bdf, family=binomial(), weight=COEF)
bdfsmall <- subset(tablebdf,select=c(DOMTRAV,TYPMEN2,CC,REVTOT,DIPLOPR,DIPLOCJ,COEF)) # selection des variables
bdfsmall
# level = variable quali
bdf.logit <- glm(DOMTRAV~TYPMEN2+CC+REVTOT+DIPLOPR+DIPLOCJ, data=bdf, family=binomial(),weight=COEF) # ponderation a chacune des obs
# 1e estimation : des variables sont peu etre pas utiles
bdf.logit
library(MASS)
bdf.BIC <- stepAIC(bdf.logit,direction="both",k=log(dim(bdf)[1]))
bdf.AIC <- stepAIC(bdf.logit,direction="both",k=2)
bdf.AIC
bdf.logit2 <- glm(DOMTRAV-TYPMEN2*REVTOT+CC+DIPLOPR+DIPLOCJ, data=bdf, family=binomial(), weight=COEF)
bdf.logit2
bdf.logit2 <- glm(DOMTRAV~TYPMEN2*REVTOT+CC+DIPLOPR+DIPLOCJ, data=bdf, family=binomial(), weight=COEF)
bdf.BIC2 <- stepAIC(bdf.logit2, direction="both",k=log(dim(bdf)[1]))
bdf.AIC2 <- stepAIC(bdf.logit2, direction="both",k=2)
bdf.logit4 <- glm(DOMTRAV~CC+DIPLOPR+TYPMEN2*DIPLOCJ*REVTOT, data=bdf, family=binomial(), weight=COEF)
bdf.BIC3 <- stepAIC(bdf.logit3,direction="both",k=log(dim(bdf)[1]))
# car la variable 3 est trop grande, il y a des interactions qui valent 0
bdf.BIC3 <- stepAIC(bdf.logit4,direction="both",k=log(dim(bdf)[1]))
bdf.BIC3
bdf.AIC3 <- stepAIC(bdf.logit4,direction="both",k=2)
bdf.AIC3
villes <- read.table("/Users/florazheng/Library/CloudStorage/OneDrive-UniversitéParis1Panthéon-Sorbonne/M1 Ecostats/S1/sondages/Ancien projet/villes.txt",header=T,row.names=1)
library(FactoMineR)
install.packages("FactoMineR")
library(FactoMineR)
villes.pca <- PCA(viles, quanti.sup=13:16,graph=F)
villes.pca <- PCA(villes, quanti.sup=13:16,graph=F)
ville.km <- kmeans(villes[,1:12],4,nstart=100)
villes.hc <- hclust(dist(villes[,1:12]), method="ward.D")
villes.hc
plot(villes.hc)
villes.hc <-hclust(dist(villes[,1:12]), method="complete")
plot(villes.hc)
villes.pca$cos2
villes.pca$ind$cos2
villes.pca
plot(villes.pca)
plot(ville.km)
plot(villes.pca)
ville.km <- kmeans(villes[,1:12],4,nstart=100)
plot(ville.km)
plot(ville.km)
plot(villes.pca)
plot(villes.pca)
villes.km <- kmeans(villes[,1:12], 2, nstart=100)
villes.km
# on rajoute une classe pour voir si c'est tjrs interpretable
villes.km <- kmeans(villes[,1:12], 3, nstart=100)
villes.km <- kmeans(villes[,1:12], 4, nstart=100)
villes.km
# on rajoute une classe pour voir si c'est tjrs interpretable
villes.km <- kmeans(villes[,1:12], 3, nstart=100)
villes.km
villes.km <- kmeans(villes[,1:12], 4, nstart=100)
villes.km
villes.hc <- hclust(dist(villes[,1:12]), method="ward.D")
plot(villes.hc)
# EXO 3 : universites
tablebdf <- read.table("/Users/florazheng/Library/CloudStorage/OneDrive-UniversitéParis1Panthéon-Sorbonne/M1 Ecostats/S1/sondages/Ancien projet/universite.csv", sep=":",header=T)
# EXO 3 : universites
univ <- read.table("/Users/florazheng/Library/CloudStorage/OneDrive-UniversitéParis1Panthéon-Sorbonne/M1 Ecostats/S1/sondages/Ancien projet/universite.csv", sep=":",header=T)
univ.pca <- PCA(villes, quanti.sup=13:16,graph=F)
plot(univ.pca)
univ.pca <- PCA(villes, quanti,graph=F)
plot(univ.pca)
res.ca<- CA(univ,col.sup=7:12)
res.ca<- CA(univ,col.sup=7:12)
# EXO 3 : universites
univ <- read.table("/Users/florazheng/Library/CloudStorage/OneDrive-UniversitéParis1Panthéon-Sorbonne/M1 Ecostats/S1/sondages/Ancien projet/universite.csv", sep=":",header=T)
res.ca<- CA(univ,col.sup=7:12)
# EXO 3 : universites
univ <- read.table("/Users/florazheng/Library/CloudStorage/OneDrive-UniversitéParis1Panthéon-Sorbonne/M1 Ecostats/S1/sondages/Ancien projet/universite.csv,"sep=";",header=T,row.names=1))
# EXO 3 : universites
univ <- read.table("/Users/florazheng/Library/CloudStorage/OneDrive-UniversitéParis1Panthéon-Sorbonne/M1 Ecostats/S1/sondages/Ancien projet/universite.csv",sep=";",header=T,row.names=1))
# EXO 3 : universites
univ <- read.table("/Users/florazheng/Library/CloudStorage/OneDrive-UniversitéParis1Panthéon-Sorbonne/M1 Ecostats/S1/sondages/Ancien projet/universite.csv",sep=";",header=T,row.names=1)
univ.pca <- PCA(villes, quanti.sup=13:16,graph=F)
res.ca<- CA(univ,col.sup=7:12)
res.ca$col$contrib
res.ca$col$contrib
res.ca$col$cos2
res.ca$row$cos2
### import des librairies
library(dplyr)
library(ggplot2)
# lire le fichier csv
data <- read.csv("/Users/florazheng/Library/CloudStorage/OneDrive-UniversitéParis1Panthéon-Sorbonne/M1 Ecostats/S1/santé/Projet/data.csv")
# on elimine les colonnes inutiles
gdata <- gdata[, -22] # highest league : colonne nulle
gdata <- gdata[, -49] # accept : inutile
names(gdata) # verification
# on elimine des colonnes puisqu'on a deja le total de GAD, SWL et SPIN
gdata <- gdata[, -c(3:9, 11:15, 23:39)]
names(gdata) # verification
# summary
summary(gdata) # valeurs manquantes dans Hours, highestleague, streams, SPIN, etc.
# ignorer les valeurs manquantes
gdata_no_NA <- na.omit(gdata)
nrow(gdata_no_NA) # on perd 3000 lignes, trouver un autre moyen...
summary(gdata_no_NA)
##### GRAPHIQUES
### boxplot
# boxplot des 3 indices
boxplot(gdata_no_NA$GAD_T)
boxplot(gdata_no_NA$SWL_T)
boxplot(gdata_no_NA$SPIN_T)
# boxplot des 3 indices
boxplot(gdata_no_NA$GAD_T)
boxplot(gdata_no_NA$SWL_T)
boxplot(gdata_no_NA$SPIN_T)
boxplot(gdata_no_NA$SPIN_T)
# boxplot des 3 indices
boxplot(gdata_no_NA$GAD_T)
summary(gdata_no_NA)
setwd("~/Library/CloudStorage/OneDrive-UniversitéParis1Panthéon-Sorbonne/M1 Ecostats/S1/sondages/Ancien projet")
tablebdf <- read.table("./data/bdf.csv", sep=":",header=T)
villes <- read.table("/villes.txt",header=T,row.names=1)
villes <- read.table("./villes.txt",header=T,row.names=1)
villes <- read.table("./data/villes.txt",header=T,row.names=1)
villes
install.packages("FactoMineR")
villes.pca <- PCA(villes, quanti.sup=13:16,graph=F)
library(FactoMineR)
villes.pca <- PCA(villes, quanti.sup=13:16,graph=F)
plot(villes.pca)
ville.km <- kmeans(villes[,1:12],4,nstart=100)
plot(ville.km)
villes.hc <- hclust(dist(villes[,1:12]), method="ward.D")
plot(villes.hc)
ville.km
ville.km <- kmeans(villes[,1:12],3,nstart=100)
ville.km
villes.hc <-hclust(dist(villes[,1:12]), method="complete")
plot(villes.hc)
# qualite de la representation : excellente, car on a 80%-98% donc tous les cos2 sont bons
villes.pca$ind$cos2
## ACP
villes <- read.table("villes.txt",header=T,row.names=1)
## ACP
villes[,1:8]
ville
villes
villes[,9:16]
villes.pca$eig
plot(villes.pca,choix="var",cex=0.7)
plot(villes.pca,choix="ind",cex=0.7)
## Q3 : les individus villes sont ils bien representes sur le 1er plan factoriel ?
villes.pca$cos2
## Q3 : les individus villes sont ils bien representes sur le 1er plan factoriel ?
villes.pca$row$cos2
## Q3 : les individus villes sont ils bien representes sur le 1er plan factoriel ?
villes.pca$ind$cos2
## Q3 : les individus villes sont ils bien representes sur le 1er plan factoriel ?
villes.pca$ind$cos2[,1:2]
setwd("~/Library/CloudStorage/OneDrive-UniversitéParis1Panthéon-Sorbonne/M1 Ecostats/S1/sondages/Projet")
voitures <- read.table("./data/voitures", header = TRUE)
names(voitures)
# on regarde les valeurs propres
voitures.acp$eig
##### ACP #####
library(FactoMineR)
# on regarde les valeurs propres
voitures.acp$eig
# lire les donnees "voitures"
voitures <- read.table("./data/voitures", header = TRUE)
names(voitures)
# on regarde les valeurs propres
voitures.acp$eig
voitures.acp$eig
voitures.acp <- PCA(voitures, graph=F)
##### ACP #####
library(FactoMineR)
voitures.acp$eig
plot(voitures.acp,choix="var", cex=0.7)
voitures
plot(voitures.acp,choix="var", cex=0.7)
plot(voitures.acp,choix="ind", cex=0.7)
voitures.acp$ind$cos2
## (a) : les individus sont ils bien representes sur le premier plan factoriel ?
voitures.acp$ind$cos2[,1:2]
# la plupart sont bien representees car nous avons 80-90%
# voitures mal representees : PEUGEOTRCZ
voitures.acp$ind$cos2
## (a) : les individus sont ils bien representes sur le premier plan factoriel ?
voitures.acp$ind$cos2[,1:2]
voitures.acp <- PCA(voitures, quanti.sup=7, graph=F)
voitures.acp$eig
plot(voitures.acp,choix="var", cex=0.7)
plot(voitures.acp,choix="ind", cex=0.7)
voitures.acp <- PCA(voitures, graph=F)
plot(voitures.acp,choix="var", cex=0.7)
## Q3 : representez les individus sur le premier plan factoriel
plot(voitures.acp,choix="ind", cex=0.7)
voitures.acp$ind$cos2[,1:2]
voitures
voitures.acp$ind$cos2[,1:2]
5
## (e) : PEUGEOTRCZ et JAGUARF ont-ils un profil semblable ? Si oui, quel est-il ?
# Non car PEUGEOTRZ est mal represente sur le premier plan factoriel
voitures["PEUGEOTRCZ"]
## (e) : PEUGEOTRCZ et JAGUARF ont-ils un profil semblable ? Si oui, quel est-il ?
# Non car PEUGEOTRZ est mal represente sur le premier plan factoriel
voitures[1]
## (e) : PEUGEOTRCZ et JAGUARF ont-ils un profil semblable ? Si oui, quel est-il ?
# Non car PEUGEOTRZ est mal represente sur le premier plan factoriel
voitures[2]
## (e) : PEUGEOTRCZ et JAGUARF ont-ils un profil semblable ? Si oui, quel est-il ?
# Non car PEUGEOTRZ est mal represente sur le premier plan factoriel
voitures[5]
## (e) : PEUGEOTRCZ et JAGUARF ont-ils un profil semblable ? Si oui, quel est-il ?
# Non car PEUGEOTRZ est mal represente sur le premier plan factoriel
voitures[,5]
## (e) : PEUGEOTRCZ et JAGUARF ont-ils un profil semblable ? Si oui, quel est-il ?
# Non car PEUGEOTRZ est mal represente sur le premier plan factoriel
voitures
## (e) : PEUGEOTRCZ et JAGUARF ont-ils un profil semblable ? Si oui, quel est-il ?
# Non car PEUGEOTRZ est mal represente sur le premier plan factoriel
voitures[4:5]
## (e) : PEUGEOTRCZ et JAGUARF ont-ils un profil semblable ? Si oui, quel est-il ?
# Non car PEUGEOTRZ est mal represente sur le premier plan factoriel
voitures[,4:5]
## (e) : PEUGEOTRCZ et JAGUARF ont-ils un profil semblable ? Si oui, quel est-il ?
# Non car PEUGEOTRZ est mal represente sur le premier plan factoriel
voitures[4:5,]
voitures.acp$ind$cos2[,1:2]
plot(voitures.acp,choix="var", cex=0.7)
voitures.acp$row$contrib
voitures.acp$ind$contrib
# lire les donnees simu.txt
simudf <- read.table("./data/simu.txt", header=TRUE)
# statistiques descriptives
head(simudf)
str(simudf)
summary(simudf)
# transformer Y en facteur car ne prend des valeurs que dans {1,2}
simudf$Y <- as.factor(simudf$Y)
simudf.logit <- glm(Y ~ X1 + X2, data = simudf, family = binomial())
summary(simudf.logit)
simu.test <- read.table("./data/xsimutest.txt", header=TRUE)
# on recupere les probabilites estimees de chaque obs
fitted.test <- predict(simudf.logit, simu.test, type = "response")
# seuil de classification
logit_predictions <- ifelse(fitted.test > 0.5, 1, 2) # si la proba > 0.5 alors on estime Y=1, sinon Y=2
# creation du fichier qui contient les predictions
write.table(logit_predictions, "logit_predictions.txt", row.names = FALSE, col.names = FALSE)
tree <- rpart(Y ~ X1 + X2, data = simudf)
##### REGRESSION BINAIRE #####
library(MASS)
tree <- rpart(Y ~ X1 + X2, data = simudf)
library(rpart)
library(rpart.plot)
# creation du fichier qui contient les predictions
write.table(logit_predictions, "logit_predictions.txt", row.names = FALSE, col.names = FALSE)
printcp(tree)
prp(tree)
pred <- predict(tree, train.simu, type = "class")
tree <- rpart(Y ~ X1 + X2, data = simudf)
printcp(tree)
prp(tree)
pred <- predict(tree, train.simu, type = "class")
pred <- predict(tree, simu.test, type = "class")
pred
# creation du fichier qui contient les predictions par arbre de classification
write.table(class_predictions, "class_predictions.txt", row.names = FALSE, col.names = FALSE)
# creation du fichier qui contient les predictions par arbre de classification
write.table(class_predictions, "class_predictions.txt", row.names = FALSE, col.names = FALSE)
write.table(pred, "class_predictions.txt", row.names = FALSE, col.names = FALSE)
set.seed(123)  # Pour avoir des resultats reproductibles
rf_model <- randomForest(Y ~ X1 + X2, data = simudf)
# creation du fichier qui contient les predictions par arbre de classification
write.table(pred, "class_predictions.txt", row.names = FALSE, col.names = FALSE)
rf_model <- randomForest(Y ~ X1 + X2, data = simudf)
library(randomForest)
set.seed(123)  # Pour avoir des resultats reproductibles
rf_model <- randomForest(Y ~ X1 + X2, data = simudf)
rf_predictions <- predict(rf_model, newdata = simu.test)
rf_predictions <- as.numeric(as.character(rf_predictions))
write.table(rf_predictions, "rf_predictions.txt", row.names = FALSE, col.names = FALSE)
