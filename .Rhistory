gdata <- gdata %>%
mutate_if(is.character, factor)
names(gdata)
gdata <- gdata[, -22, -50]
# highest league : colonne nulle
# accept : inutile
names(gdata) # verification
# copie des donnees
gdata <- as.data.frame(data)
# variables
names(gdata)
# on elimine les colonnes inutiles
gdata <- gdata[, -22] # highest league : colonne nulle
names(gdata) # verification
gdata <- gdata[, -49] # accept : inutile
names(gdata) # verification
gdata <- gdata[, -c(3:9, 11:15, 23:39)]
names(gdata) # verification
# summary
summary(gdata) # valeurs manquantes dans Hours, highestleague, streams, SPIN, etc.
gdata_no_NA <- na.omit(gdata)
gdata_no_NA
nrow(gdata_no_NA)
shape(gdata_no_NA)
nrow(gdata_no_NA) # on perd 3000 lignes, trouver un autre moyen...
summary(gdata_no_NA)
# summary
summary(gdata) # valeurs manquantes dans Hours, highestleague, streams, SPIN, etc.
hist(gdata_no_NA$Hours,
breaks = 20,
col = "skyblue",
border = "black",
main = "Histogramme des heures de jeu",
xlab = "Heures de jeu",
ylab = "Fréquence")
boxplot(gdata_no_NA$GAD_T)
boxplot(gdata_no_NA$SWL_T)
boxplot(gdata_no_NA$SPIN_T)
boxplot(gdata_no_NA$GAD_T)
boxplot(gdata_no_NA$SWL_T)
boxplot(gdata_no_NA$SPIN_T)
hist(gdata_no_NA$Hours,
breaks = 20,
col = "skyblue",
border = "black",
main = "Histogramme des heures de jeu",
xlab = "Heures de jeu",
ylab = "Fréquence")
hist(gdata_no_NA$Hours,
breaks = 1000,
col = "skyblue",
border = "black",
main = "Histogramme des heures de jeu",
xlab = "Heures de jeu",
ylab = "Fréquence")
hist(gdata_no_NA$Hours,
breaks = 10,
col = "skyblue",
border = "black",
main = "Histogramme des heures de jeu",
xlab = "Heures de jeu",
ylab = "Fréquence")
hist(gdata_no_NA$Hours,
breaks = 1,
col = "skyblue",
border = "black",
main = "Histogramme des heures de jeu",
xlab = "Heures de jeu",
ylab = "Fréquence")
hist(gdata_no_NA$Hours,
breaks = 15,
col = "skyblue",
border = "black",
main = "Histogramme des heures de jeu",
xlab = "Heures de jeu",
ylab = "Fréquence")
table(gdata_no_NA$Hours)
hist(gdata_no_NA$Hours,
breaks = 100,
col = "skyblue",
border = "black",
main = "Histogramme des heures de jeu",
xlab = "Heures de jeu",
ylab = "Fréquence")
hist(gdata_no_NA$Hours,
breaks = 5,
col = "skyblue",
border = "black",
main = "Histogramme des heures de jeu",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Hours,
breaks = 10,
col = "skyblue",
border = "black",
main = "Histogramme des heures de jeu",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Hours,
breaks = 12,
col = "skyblue",
border = "black",
main = "Histogramme des heures de jeu",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Hours,
breaks = 14,
col = "skyblue",
border = "black",
main = "Histogramme des heures de jeu",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Hours,
breaks = 11,
col = "skyblue",
border = "black",
main = "Histogramme des heures de jeu",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Hours,
breaks = 8,
col = "skyblue",
border = "black",
main = "Histogramme des heures de jeu",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Hours,
breaks = 10,
col = "skyblue",
border = "black",
main = "Histogramme des heures de jeu",
xlab = "Heures de jeu",
ylab = "Fréquence")
summary(gdata_no_NA)
table(gdata_no_NA$Hours)
hist(is.numeric(gdata_no_NA$Hours),
breaks = 10,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(as.numeric(gdata_no_NA$Hours),
breaks = 10,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Hours,
breaks = 10,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
hist(gdata_no_NA$Hours,
breaks = 10,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence",
freq = FALSE)
hist(gdata_no_NA$Hours,
breaks = 10,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
# variables
names(gdata)
hist(gdata_no_NA$Age,
breaks = 10,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
hist(gdata_no_NA$Age,
breaks = 20,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
hist(gdata_no_NA$Age,
breaks = 50,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Age,
breaks = 30,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Age,
breaks = 25,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
hist(gdata_no_NA$Age,
breaks = 25,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Age,
breaks = 35,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Age,
breaks = 40,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Age,
breaks = 50,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Age,
breaks = 10,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Age,
breaks = 15,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
# Frequence des heures de jeu par semaine
hist(gdata_no_NA$Hours,
breaks = 10,
col = "skyblue",
border = "black",
main = "Heures de jeu par semaine",
xlab = "Heures de jeu",
ylab = "Fréquence")
plot(GAD_T ~ Hours, data = gdata_no_NA)
head(gdata_no_NA)
plot(GAD_T ~ Hours, data = gdata_no_NA)
reg <-lm(GAD_T ~ Hours, data = gdata_no_NA)
summary(reg)
boxplot(gdata_no_NA$GAD_T)
boxplot(gdata_no_NA$SWL_T)
boxplot(gdata_no_NA$SPIN_T)
reg1 <-lm(SPIN_T ~ Hours, data = gdata_no_NA)
summary(reg1)
reg <-lm(GAD_T ~ Hours, data = gdata_no_NA)
summary(reg)
reg1 <-lm(SPIN_T ~ Hours, data = gdata_no_NA)
summary(reg1)
nrow(gdata) # 14 464 ligneS
boxplot(gdata_no_NA$Hours)
tablebdf <- read.table("/Users/florazheng/Library/CloudStorage/OneDrive-UniversitéParis1Panthéon-Sorbonne/M1 Ecostats/S1/sondages/Ancien projet/bdf/bdf.csv", sep=":",header=T)
bdfsmall <- subset(tablebdf,select=c(DOMTRAV,TYPMEN2,CC,REVTOT,DIPLOPR,DIPLOCJ,COEF))
bdf <- bdfsmall[complete.cases(bdfsmall),]
bdf
# level = variable quali
bdf.logit <- glm(DOMTRAV~TYPMEN2+CC+REVTOT+DIPLOPR+DIPLOCJ, data=bdf, family=binomial(),weight=COEF) # ponderation a chacune des obs
bdf[,colqual] <- data.frame(apply(bdf[colqual], 2, as.factor))
bdf$DOMTRAV <- as.factor(bdf$DOMTRAV)
bdf.logit3 <- glm(DOMTRAV-TYPMEN2*REVTOT+CC+DIPLOPR+DIPLOCJ*REVTOT, data=bdf, family=binomial(), weight=COEF)
tablebdf <- read.table("/Users/florazheng/Library/CloudStorage/OneDrive-UniversitéParis1Panthéon-Sorbonne/M1 Ecostats/S1/sondages/Ancien projet/bdf/bdf.csv", sep=":",header=T)
bdfsmall <- subset(tablebdf,select=c(DOMTRAV,TYPMEN2,CC,REVTOT,DIPLOPR,DIPLOCJ,COEF)) # selection des variables
bdf <- bdfsmall[complete.cases(bdfsmall),] # recup que les donnees sans valeurs manquantes
bdf$DOMTRAV <- as.factor(bdf$DOMTRAV)
bdf$TYPMEN2 <-as.factor(bdf$TYPMEN2)
bdf$CC <- as.factor(bdf$CC)
bdf$DIPLOPR <- as.factor(bdf$DIPLOPR)
bdf$DIPLOCJ <- as.factor(bdf$DIPLOCJ)
# level = variable quali
bdf.logit <- glm(DOMTRAV~TYPMEN2+CC+REVTOT+DIPLOPR+DIPLOCJ, data=bdf, family=binomial(),weight=COEF) # ponderation a chacune des obs
# 1e estimation : des variables sont peu etre pas utiles
bdf.logit2 <- glm(DOMTRAV-TYPMEN2*REVTOT+CC+DIPLOPR+DIPLOCJ, data=bdf, family=binomial(), weight=COEF)
bdfsmall <- subset(tablebdf,select=c(DOMTRAV,TYPMEN2,CC,REVTOT,DIPLOPR,DIPLOCJ,COEF)) # selection des variables
bdfsmall
# level = variable quali
bdf.logit <- glm(DOMTRAV~TYPMEN2+CC+REVTOT+DIPLOPR+DIPLOCJ, data=bdf, family=binomial(),weight=COEF) # ponderation a chacune des obs
# 1e estimation : des variables sont peu etre pas utiles
bdf.logit
library(MASS)
bdf.BIC <- stepAIC(bdf.logit,direction="both",k=log(dim(bdf)[1]))
bdf.AIC <- stepAIC(bdf.logit,direction="both",k=2)
bdf.AIC
bdf.logit2 <- glm(DOMTRAV-TYPMEN2*REVTOT+CC+DIPLOPR+DIPLOCJ, data=bdf, family=binomial(), weight=COEF)
bdf.logit2
bdf.logit2 <- glm(DOMTRAV~TYPMEN2*REVTOT+CC+DIPLOPR+DIPLOCJ, data=bdf, family=binomial(), weight=COEF)
bdf.BIC2 <- stepAIC(bdf.logit2, direction="both",k=log(dim(bdf)[1]))
bdf.AIC2 <- stepAIC(bdf.logit2, direction="both",k=2)
bdf.logit4 <- glm(DOMTRAV~CC+DIPLOPR+TYPMEN2*DIPLOCJ*REVTOT, data=bdf, family=binomial(), weight=COEF)
bdf.BIC3 <- stepAIC(bdf.logit3,direction="both",k=log(dim(bdf)[1]))
# car la variable 3 est trop grande, il y a des interactions qui valent 0
bdf.BIC3 <- stepAIC(bdf.logit4,direction="both",k=log(dim(bdf)[1]))
bdf.BIC3
bdf.AIC3 <- stepAIC(bdf.logit4,direction="both",k=2)
bdf.AIC3
villes <- read.table("/Users/florazheng/Library/CloudStorage/OneDrive-UniversitéParis1Panthéon-Sorbonne/M1 Ecostats/S1/sondages/Ancien projet/villes.txt",header=T,row.names=1)
library(FactoMineR)
install.packages("FactoMineR")
library(FactoMineR)
villes.pca <- PCA(viles, quanti.sup=13:16,graph=F)
villes.pca <- PCA(villes, quanti.sup=13:16,graph=F)
ville.km <- kmeans(villes[,1:12],4,nstart=100)
villes.hc <- hclust(dist(villes[,1:12]), method="ward.D")
villes.hc
plot(villes.hc)
villes.hc <-hclust(dist(villes[,1:12]), method="complete")
plot(villes.hc)
villes.pca$cos2
villes.pca$ind$cos2
villes.pca
plot(villes.pca)
plot(ville.km)
plot(villes.pca)
ville.km <- kmeans(villes[,1:12],4,nstart=100)
plot(ville.km)
plot(ville.km)
plot(villes.pca)
plot(villes.pca)
villes.km <- kmeans(villes[,1:12], 2, nstart=100)
villes.km
# on rajoute une classe pour voir si c'est tjrs interpretable
villes.km <- kmeans(villes[,1:12], 3, nstart=100)
villes.km <- kmeans(villes[,1:12], 4, nstart=100)
villes.km
# on rajoute une classe pour voir si c'est tjrs interpretable
villes.km <- kmeans(villes[,1:12], 3, nstart=100)
villes.km
villes.km <- kmeans(villes[,1:12], 4, nstart=100)
villes.km
villes.hc <- hclust(dist(villes[,1:12]), method="ward.D")
plot(villes.hc)
# EXO 3 : universites
tablebdf <- read.table("/Users/florazheng/Library/CloudStorage/OneDrive-UniversitéParis1Panthéon-Sorbonne/M1 Ecostats/S1/sondages/Ancien projet/universite.csv", sep=":",header=T)
# EXO 3 : universites
univ <- read.table("/Users/florazheng/Library/CloudStorage/OneDrive-UniversitéParis1Panthéon-Sorbonne/M1 Ecostats/S1/sondages/Ancien projet/universite.csv", sep=":",header=T)
univ.pca <- PCA(villes, quanti.sup=13:16,graph=F)
plot(univ.pca)
univ.pca <- PCA(villes, quanti,graph=F)
plot(univ.pca)
res.ca<- CA(univ,col.sup=7:12)
res.ca<- CA(univ,col.sup=7:12)
# EXO 3 : universites
univ <- read.table("/Users/florazheng/Library/CloudStorage/OneDrive-UniversitéParis1Panthéon-Sorbonne/M1 Ecostats/S1/sondages/Ancien projet/universite.csv", sep=":",header=T)
res.ca<- CA(univ,col.sup=7:12)
# EXO 3 : universites
univ <- read.table("/Users/florazheng/Library/CloudStorage/OneDrive-UniversitéParis1Panthéon-Sorbonne/M1 Ecostats/S1/sondages/Ancien projet/universite.csv,"sep=";",header=T,row.names=1))
# EXO 3 : universites
univ <- read.table("/Users/florazheng/Library/CloudStorage/OneDrive-UniversitéParis1Panthéon-Sorbonne/M1 Ecostats/S1/sondages/Ancien projet/universite.csv",sep=";",header=T,row.names=1))
# EXO 3 : universites
univ <- read.table("/Users/florazheng/Library/CloudStorage/OneDrive-UniversitéParis1Panthéon-Sorbonne/M1 Ecostats/S1/sondages/Ancien projet/universite.csv",sep=";",header=T,row.names=1)
univ.pca <- PCA(villes, quanti.sup=13:16,graph=F)
res.ca<- CA(univ,col.sup=7:12)
res.ca$col$contrib
res.ca$col$contrib
res.ca$col$cos2
res.ca$row$cos2
### import des librairies
library(dplyr)
library(ggplot2)
# lire le fichier csv
data <- read.csv("/Users/florazheng/Library/CloudStorage/OneDrive-UniversitéParis1Panthéon-Sorbonne/M1 Ecostats/S1/santé/Projet/data.csv")
# on elimine les colonnes inutiles
gdata <- gdata[, -22] # highest league : colonne nulle
gdata <- gdata[, -49] # accept : inutile
names(gdata) # verification
# on elimine des colonnes puisqu'on a deja le total de GAD, SWL et SPIN
gdata <- gdata[, -c(3:9, 11:15, 23:39)]
names(gdata) # verification
# summary
summary(gdata) # valeurs manquantes dans Hours, highestleague, streams, SPIN, etc.
# ignorer les valeurs manquantes
gdata_no_NA <- na.omit(gdata)
nrow(gdata_no_NA) # on perd 3000 lignes, trouver un autre moyen...
summary(gdata_no_NA)
##### GRAPHIQUES
### boxplot
# boxplot des 3 indices
boxplot(gdata_no_NA$GAD_T)
boxplot(gdata_no_NA$SWL_T)
boxplot(gdata_no_NA$SPIN_T)
# boxplot des 3 indices
boxplot(gdata_no_NA$GAD_T)
boxplot(gdata_no_NA$SWL_T)
boxplot(gdata_no_NA$SPIN_T)
boxplot(gdata_no_NA$SPIN_T)
# boxplot des 3 indices
boxplot(gdata_no_NA$GAD_T)
summary(gdata_no_NA)
## Q1 : determiner le meilleur modele possible pour modeliser P(Y|X1,X2)
# lire les donnees simu.txt
simudf <- read.table("./data/simu.txt", header=T)
setwd("~/Library/CloudStorage/OneDrive-UniversitéParis1Panthéon-Sorbonne/M1 Ecostats/S1/sondages/Projet")
## Q1 : determiner le meilleur modele possible pour modeliser P(Y|X1,X2)
# lire les donnees simu.txt
simudf <- read.table("./data/simu.txt", header=T)
# statistiques descriptives
head(simudf)
str(simudf)
summary(simudf)
# transformer Y en facteur car ne prend des valeurs que dans {1,2}
simudf$Y <- as.factor(simudf$Y)
---------------------------------------------
# regression logistique
simudf.logit <- glm(Y ~ X1 + X2, data = simudf, family = binomial())
# regression logistique
simudf.logit <- glm(Y ~ X1 + X2, data = simudf, family = binomial())
summary(simudf.logit)
---------------------------------------------
# regression logistique
simudf.logit <- glm(Y ~ X1 + X2, data = simudf, family = binomial())
# stepwise logistic regression BIC
library(MASS)
simudf.BIC <- stepAIC(simudf.logit,direction="both",k=log(dim(simudf)[1]))
summary(simudf.BIC)
# stepwise logistic regression AIC
simudf.AIC <- stepAIC(simudf.logit,direction="both")
summary(simudf.AIC)
---------------------------------------------
# regression logistique avec interaction
simudf.logit2 <- glm(Y ~ X1 + X2 + X1*X2, data = simudf, family = binomial())
simudf.logit2 <- glm(Y ~ X1 + X2 + X1*X2, data = simudf, family = binomial())
summary(simudf.logit2)
simudf.BIC2 <- stepAIC(simudf.logit2,direction="both",k=log(dim(simudf)[1]))
summary(simudf.BIC2)
library(rpart)
library(rpart.plot)
data(ptitanic)
nrow(ptitanic)
names(ptitanic)
ptitanicTree <- rpart(survived~.,data=ptitanic)
prp(ptitanicTree)
printcp(ptitanicTree)
prp(ptitanicTree)
ptitanicTree
table(ptitanic$survived, predict(ptitanicTree, ptitanic, type="class"))
table(ptitanic$survived, predict(ptitanicTree, ptitanic, type="class"))
rpart(survived~.,data=ptitanic)
table(ptitanic$survived, predict(ptitanicTree, ptitanic, type="class"))
xt<-c(112,121,131,141,151,161,176,196)
qualx<-factor(xt) # pour avoir des classes
nt<-c(156,252,284,271,139,85,99,43)
sumy<-c(3,17,12,16,12,8,16,8)
Pi<-sumy/nt
Pi # proba d'etre malade quand on a une pression sanguine de xt
logL <- log(  prod( Pi^sumy * (1-Pi)^(nt-sumy) )  )
logL
modqual.logit <- glm(mod~qualx, family=binomial) #glm et binomial = regression logistique
modqual.logit
mod <- cbind(sumy,nt-sumy)
mod
modqual.logit <- glm(mod~qualx, family=binomial) #glm et binomial = regression logistique
modqual.logit
summary(modqual.logit)
modquant.logit <- glm(mod~xt, family=binomial)
summary(modquant.logit)
mod.int <- glm(mod~1, family=binomial)
summary(mod.int)
chi2testqual <- deviance(mod.int)-deviance(modqual.logit)
probaqual <- 1-pchisq(chi2testqual,7) #7 degres de liberte
cat("\n Test du rapport de vraisemblance (xt qualitatif) :\n",chi2testqual," p-value : ",probaqual,"\n")
# Rejet de H0
uantitatif"
chi2test <- deviance(mod.int)-deviance(modquant.logit)
# P-value pour tester la nullite du parametre lie a xt quantitatif
probaquant <- 1-pchisq(chi2test,1)
cat("\n Test du rapport de vraisemblance (xt quantitatif) :\n",chi2test," p-value : ",probaquant,"\n")
chi2test <- deviance(mod.int)-deviance(modquant.logit)
probaquant <- 1-pchisq(chi2test,1)
probaquant <- 1-pchisq(chi2test,1)
cat("\n Test du rapport de vraisemblance (xt quantitatif) :\n",chi2test," p-value : ",probaquant,"\n")
library(caret)
library(InformationValue)
install.packages("caret")
install.packages("InformationValue")
install.packages("kernlab")
